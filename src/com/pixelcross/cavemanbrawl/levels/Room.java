package com.pixelcross.cavemanbrawl.levels;

import java.awt.Point;

import com.pixelcross.cavemanbrawl.gfx.GameCamera;
import com.pixelcross.cavemanbrawl.levels.tiles.GrassTile;
import com.pixelcross.cavemanbrawl.levels.tiles.RockTile;
import com.pixelcross.cavemanbrawl.levels.tiles.Tile;
import com.pixelcross.cavemanbrawl.levels.tiles.TileMap;

import javafx.scene.canvas.GraphicsContext;

/**
 * @author Justin Schreiber
 *
 * Defines a room in which the player can move around in
 */
public class Room {

	private int width, height;
	private TileMap[] tileLayers;
	private RoomGenerator rg;
	private boolean[] doors;
	private Point playerSpawn;
	
	/**
	 * Creates a Room with a given width and height
	 * 
	 * @param width
	 * @param height
	 */
	public Room(int width, int height) {
		this.width = width;
		this.height = height;
		//Initialize all the tile maps 
		//Layers:[1 - Background, 2 - World, 3 - Spawner, 4 - Misc]
		this.tileLayers = new TileMap[4];
		for (int i = 0; i < tileLayers.length; i++) {
			tileLayers[i] = new TileMap(width, height);
		}
		//Initialize all doors to closed
		doors = new boolean[4];
		doors[0] = false;
		doors[1] = false;
		doors[2] = false;
		doors[3] = false;

	}

	public int getWidth() {
		return width;
	}

	public int getHeight() {
		return height;
	}

	/**
	 * Get the tile on a layer at the x and y position defined
	 * 
	 * @param layer (TileMap layer)
	 * @param x
	 * @param y
	 * @return Tile
	 */
	public Tile getTile(int layer, int x, int y) {
		return tileLayers[layer].getTile(x, y);
	}
	
	/**
	 * Generates a room using the MapGenerator and the RoomGenerator
	 * 
	 * @param caveValue (The density of the cave generation)
	 */
	public void generateRoom(int caveValue) {
		//Creates a map generator with the given 
		//cave density with a size that matches the room
		MapGenerator mg = new MapGenerator(width, height, caveValue);
		//Creates a room generator using the map generated by the MapGenerator
		rg = new RoomGenerator(mg.generateMap(doors));
		//Generates the foreground for the room (Walls)
		int[][] foreground = rg.generateForeground();
		//Generates spawn positions for the room
		int[][] spawns = rg.generateSpawns();
		//Generates the backgound tiles for the room
		generateBackground();
		//Generates the foreground (walls) using the generated foreground array
		generateForeground(foreground);
		//Generates spawns using the generated spawns array
		generateSpawns(spawns);
	}
	
	/**
	 * Generates the background tiles
	 */
	private void generateBackground() {
		for (int x = 0; x < width; x ++) {
			for (int y = 0; y < height; y ++) {
				tileLayers[0].setTile(x, y, new GrassTile(0));
			}
		}
	}
	
	/**
	 * Generates the foreground (wall) tiles based on the foreground array
	 * 
	 * @param foreground
	 */
	private void generateForeground(int[][] foreground) {
		for (int x = 0; x < width; x ++) {
			for (int y = 0; y < height; y ++) {
				if (foreground[x][y] == 1) {
					tileLayers[1].setTile(x, y, new RockTile(0));
				}
			}
		}
	}
	
	/**
	 * Generates the spawn tiles based on the spawns array
	 * 
	 * @param spawns
	 */
	private void generateSpawns(int[][] spawns) {
		for (int x = 0; x < width; x ++) {
			for (int y = 0; y < height; y ++) {
				if (spawns[x][y] == 1) {
					playerSpawn = new Point(x, y);
				}
			}
		}
	}
	
	/**
	 * Updates the room
	 */
	public void update() {
		
	}
	
	/**
	 * Renders the room to the screen using the camera
	 * 
	 * @param gc (GraphicsContext object used to draw to the canvas)
	 * @param interpolation (Frame adjustment)
	 * @param camera (Camera used for displaying)
	 */
	public void render(GraphicsContext gc, double interpolation, GameCamera camera) {
		int xStart = (int) Math.max(0, camera.getxOffset() / Tile.TILEWIDTH);
		int xEnd = (int) Math.min(width, (camera.getxOffset() + camera.getScreenWidth()) / Tile.TILEWIDTH + 1);
		int yStart = (int) Math.max(0, camera.getyOffset() / Tile.TILEHEIGHT);
		int yEnd = (int) Math.min(height, (camera.getyOffset() + camera.getScreenWidth()) / Tile.TILEHEIGHT + 1);
		
		for (int layer = 0; layer < 4; layer++) {
			for(int y = yStart; y < yEnd;y++) {
				for(int x = xStart; x < xEnd;x++) {
					Tile tile = getTile(layer, x, y);
					if (tile != null) {
						tile.render(gc, (int) (x * Tile.TILEWIDTH - camera.getxOffset()), (int) (y * Tile.TILEHEIGHT - camera.getyOffset()));
					}
				}
			}
		}
	}

	public Point getPlayerSpawn() {
		return playerSpawn;
	}

}
